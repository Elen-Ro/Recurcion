import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.math.BigInteger;

public class ComputeFibonacci {
    public static void main(String args[]) {

        // Create a CSV file
        try (PrintWriter writer = new PrintWriter(new File("FibonacciReport.csv"))) {
            writer.append("Integer,Recursive time,Iterative time");
            writer.append("\n");

            // Use at least 20 different values of n from 2 to 40 with increments of 2
            for (int i = 1; i < 41; i++) {
                i = i + 1;
                System.out.print("\nNumber: " + i);
                System.out.println("\nRecursive call: fibonacci number at index " + i + " is " + Fibonacci(i));
                System.out.println("Iterative call: fibonacci number at index " + i + " is " + nFibonacci(i));

                // The time function to find the time spent for different values of n using recursive call
                long start = System.nanoTime();
                Fibonacci(i);
                long end = System.nanoTime();
                long duration1 = end - start;
                System.out.println("Recursive calculation of Fibonacci number of " + i + " was " + duration1 + " nanoseconds");

                // The time function to find the time spent for different values of n using non-recursive call
                start = System.nanoTime();
                nFibonacci(i);
                end = System.nanoTime();
                long duration2 = end - start;
                System.out.println("Iterative calculation of Fibonacci number of " + i + " was " + duration2 + " nanoseconds");

                // Display the results in a CSV file
                StringBuilder sb = new StringBuilder();
                sb.append(i);
                sb.append(',');
                sb.append(duration1);
                sb.append(',');
                sb.append(duration2);
                sb.append('\n');

                writer.write(sb.toString());
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }

    // Recursive function
    public static BigInteger Fibonacci(int n) {
        if (n == 0) // Base case
            return BigInteger.ZERO;
        else if (n == 1) // Base case
            return BigInteger.ONE;
        else
            return Fibonacci(n - 1).add(Fibonacci(n - 2));
    }

    // Non-recursive function
    public static BigInteger nFibonacci(int n) {
        BigInteger num1 = BigInteger.ZERO;
        BigInteger num2 = BigInteger.ONE;
        BigInteger num3 = BigInteger.ONE;
        if (n == 0)
            return num1;
        for (int j = 2; j <= n; j++) {
            num3 = num1.add(num2);
            num1 = num2;
            num2 = num3;
        }
        return (num2);
    }
}
